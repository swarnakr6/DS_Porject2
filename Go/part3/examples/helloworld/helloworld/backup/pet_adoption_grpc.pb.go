// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pet_adoption.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PetAdoptionService_RegisterPet_FullMethodName = "/petadoption.PetAdoptionService/RegisterPet"
	PetAdoptionService_SearchPet_FullMethodName   = "/petadoption.PetAdoptionService/SearchPet"
)

// PetAdoptionServiceClient is the client API for PetAdoptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition
type PetAdoptionServiceClient interface {
	// Registers a new pet
	RegisterPet(ctx context.Context, in *PetInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Searches for a pet based on name, breed, or gender
	SearchPet(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type petAdoptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetAdoptionServiceClient(cc grpc.ClientConnInterface) PetAdoptionServiceClient {
	return &petAdoptionServiceClient{cc}
}

func (c *petAdoptionServiceClient) RegisterPet(ctx context.Context, in *PetInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PetAdoptionService_RegisterPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petAdoptionServiceClient) SearchPet(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, PetAdoptionService_SearchPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetAdoptionServiceServer is the server API for PetAdoptionService service.
// All implementations must embed UnimplementedPetAdoptionServiceServer
// for forward compatibility.
//
// The service definition
type PetAdoptionServiceServer interface {
	// Registers a new pet
	RegisterPet(context.Context, *PetInfo) (*RegisterResponse, error)
	// Searches for a pet based on name, breed, or gender
	SearchPet(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedPetAdoptionServiceServer()
}

// UnimplementedPetAdoptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetAdoptionServiceServer struct{}

func (UnimplementedPetAdoptionServiceServer) RegisterPet(context.Context, *PetInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPet not implemented")
}
func (UnimplementedPetAdoptionServiceServer) SearchPet(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPet not implemented")
}
func (UnimplementedPetAdoptionServiceServer) mustEmbedUnimplementedPetAdoptionServiceServer() {}
func (UnimplementedPetAdoptionServiceServer) testEmbeddedByValue()                            {}

// UnsafePetAdoptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetAdoptionServiceServer will
// result in compilation errors.
type UnsafePetAdoptionServiceServer interface {
	mustEmbedUnimplementedPetAdoptionServiceServer()
}

func RegisterPetAdoptionServiceServer(s grpc.ServiceRegistrar, srv PetAdoptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPetAdoptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetAdoptionService_ServiceDesc, srv)
}

func _PetAdoptionService_RegisterPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAdoptionServiceServer).RegisterPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetAdoptionService_RegisterPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAdoptionServiceServer).RegisterPet(ctx, req.(*PetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetAdoptionService_SearchPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAdoptionServiceServer).SearchPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetAdoptionService_SearchPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAdoptionServiceServer).SearchPet(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetAdoptionService_ServiceDesc is the grpc.ServiceDesc for PetAdoptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetAdoptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petadoption.PetAdoptionService",
	HandlerType: (*PetAdoptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPet",
			Handler:    _PetAdoptionService_RegisterPet_Handler,
		},
		{
			MethodName: "SearchPet",
			Handler:    _PetAdoptionService_SearchPet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pet_adoption.proto",
}
